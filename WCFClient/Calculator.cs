//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFSelfHost
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TwoInts", Namespace="urn://calc.fancy")]
    public partial class TwoInts : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int AField;
        
        private int BField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int A
        {
            get
            {
                return this.AField;
            }
            set
            {
                this.AField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int B
        {
            get
            {
                return this.BField;
            }
            set
            {
                this.BField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="urn://calc.fancy", ConfigurationName="FancyCalc")]
public interface FancyCalc
{
    
    [System.ServiceModel.OperationContractAttribute(Action="urn://calc.fancy/FancyCalc/Add", ReplyAction="urn://calc.fancy/FancyCalc/AddResponse")]
    int Add(int a, int b);
    
    [System.ServiceModel.OperationContractAttribute(Action="urn://calc.fancy/FancyCalc/Add", ReplyAction="urn://calc.fancy/FancyCalc/AddResponse")]
    System.Threading.Tasks.Task<int> AddAsync(int a, int b);
    
    [System.ServiceModel.OperationContractAttribute(Action="urn://calc.fancy/FancyCalc/AddComplex", ReplyAction="urn://calc.fancy/FancyCalc/AddComplexResponse")]
    int AddComplex(WCFSelfHost.TwoInts ints);
    
    [System.ServiceModel.OperationContractAttribute(Action="urn://calc.fancy/FancyCalc/AddComplex", ReplyAction="urn://calc.fancy/FancyCalc/AddComplexResponse")]
    System.Threading.Tasks.Task<int> AddComplexAsync(WCFSelfHost.TwoInts ints);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface FancyCalcChannel : FancyCalc, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class FancyCalcClient : System.ServiceModel.ClientBase<FancyCalc>, FancyCalc
{
    
    public FancyCalcClient()
    {
    }
    
    public FancyCalcClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public FancyCalcClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public FancyCalcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public FancyCalcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public int Add(int a, int b)
    {
        return base.Channel.Add(a, b);
    }
    
    public System.Threading.Tasks.Task<int> AddAsync(int a, int b)
    {
        return base.Channel.AddAsync(a, b);
    }
    
    public int AddComplex(WCFSelfHost.TwoInts ints)
    {
        return base.Channel.AddComplex(ints);
    }
    
    public System.Threading.Tasks.Task<int> AddComplexAsync(WCFSelfHost.TwoInts ints)
    {
        return base.Channel.AddComplexAsync(ints);
    }
}
